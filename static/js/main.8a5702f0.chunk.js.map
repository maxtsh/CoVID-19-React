{"version":3,"sources":["images/virus.jpg","images/White_Intro.png","components/layouts/Header.js","components/layouts/Footer.js","hooks/useCountry.js","components/layouts/Countries.js","hooks/useCorona.js","components/pages/Home.js","components/pages/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","src","require","alt","to","rel","target","href","Footer","time","Date","getFullYear","useCountry","useState","data","setData","useEffect","a","axios","get","res","console","log","fetch","Countries","countries","map","country","index","key","provinceState","countryRegion","confirmed","deaths","recovered","active","useCorona","Home","COVID","value","image","NotFound","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8a5702f0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/virus.88f9663c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/White_Intro.4ea58bd7.png\";","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header>\r\n            <nav>\r\n                <img className=\"virus-logo\" src={require('../../images/virus.jpg')} alt=\"\"/>\r\n                <h1 className=\"title\">CoViD-19 Updates & Statistics <span className=\"live\">Live</span> </h1>\r\n                <ul>\r\n                    <li><Link to=\"/\">Home</Link></li>\r\n                    <li><a rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://www.cdc.gov/coronavirus/2019-nCoV/index.html\">About</a></li>\r\n                    <li><a rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://www.cdc.gov/coronavirus/2019-ncov/symptoms-testing/symptoms.html\">Symptoms</a></li>\r\n                    <li><a rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://www.cdc.gov/coronavirus/2019-ncov/prepare/prevention.html\">Protection</a></li>\r\n                </ul>\r\n            </nav>\r\n        </header>\r\n    )\r\n};\r\nexport default Header;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Footer = () => {\r\n    const time = new Date();\r\n\r\n    return (\r\n        <footer>\r\n            <div className=\"info\">\r\n                <h1>CoronaVirus Online Statistics <span>By Max Tsh V1.0.0</span></h1>\r\n                <p>All Rights Reserved @ {time.getFullYear()}</p>\r\n            </div>\r\n            <div className=\"author\">\r\n                <Link to=\"#\">\r\n                    <img src={require('../../images/White_Intro.png')} alt=\"\"/>\r\n                </Link>\r\n                <ul>\r\n                    <li><a rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://www.instagram.com/maxtsh/\">Instagram</a></li>\r\n                    <li><a rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://www.facebook.com/realmaxtsh/\">Facebook</a></li>\r\n                    <li><a rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://twitter.com/Max_tsh\">Twitter</a></li>\r\n                    <li><a rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://github.com/maxtsh\">Github</a></li>\r\n                </ul>\r\n            </div>\r\n        </footer>\r\n    )\r\n}\r\nexport default Footer;\r\n","import { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst useCountry = () => {\r\n    const [data, setData] = useState();\r\n    useEffect(() => {\r\n        const fetch = async () => {\r\n            try{\r\n                const res = await axios.get('https://covid19.mathdro.id/api/confirmed');\r\n                setData(res.data);\r\n            }catch(error){\r\n                console.log(error);\r\n            }\r\n        };\r\n        fetch();\r\n    }, []);\r\n    return data;\r\n};\r\nexport default useCountry;","import React from 'react';\r\nimport useCountry from '../../hooks/useCountry';\r\n\r\nconst Countries = () => {\r\n    const countries = useCountry();\r\n\r\n    if(!countries){\r\n        return(\r\n            <h1>Loading...</h1>\r\n        )\r\n    }\r\n\r\n    return (\r\n    <table>\r\n        <thead>\r\n            <tr>\r\n                <th>#</th>\r\n                <th>Countries</th>\r\n                <th>Total</th>\r\n                <th>Deaths</th>\r\n                <th>Recovered</th>\r\n                <th>Active</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            {countries.map((country, index) => (\r\n                <tr key={index}>\r\n                    <td>{index}</td>\r\n                    <td>{country.provinceState ? country.provinceState : country.countryRegion}</td>\r\n                    <td>{country.confirmed}</td>\r\n                    <td className=\"deaths\">{country.deaths}</td>\r\n                    <td>{country.recovered}</td>\r\n                    <td>{country.active}</td>\r\n                </tr>\r\n            ))}\r\n        </tbody>\r\n    </table>\r\n    )\r\n};\r\n\r\nexport default Countries;\r\n","import { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst useCorona = () => {\r\n    const [data, setData] = useState();\r\n    useEffect(() => {\r\n        const fetch = async () => {\r\n            try{\r\n                const res = await axios.get('https://covid19.mathdro.id/api');\r\n                setData(res.data);\r\n            }catch(error){\r\n                console.log(error);\r\n            }\r\n        };\r\n        fetch();\r\n    }, []);\r\n    return data;\r\n};\r\nexport default useCorona;","import React from 'react'\r\nimport Header from '../layouts/Header';\r\nimport Footer from '../layouts/Footer';\r\nimport Countries from '../layouts/Countries';\r\nimport useCorona from '../../hooks/useCorona';\r\n\r\nconst Home = () => {\r\n    const COVID = useCorona();\r\n\r\n    if(!COVID){\r\n        return <h1>Loading...</h1>\r\n    }\r\n\r\n    return (\r\n        <div className=\"main-container\">\r\n            <Header />\r\n            <div className=\"wrapper\">\r\n                <div className=\"live-stats\">\r\n                    <h1 className=\"stats-title\">COVID-19 World Wide Outbreak Live Statistics</h1>\r\n                    <div className=\"stats\">\r\n                        <div className=\"total-infect\">\r\n                            <h1><span className=\"infected\">Infected:</span> {COVID.confirmed.value}</h1>\r\n                            {/* <p><Link to=\"#\">Details</Link></p> */}\r\n                        </div>\r\n                        <div className=\"total-death\">\r\n                            <h1><span className=\"death\">Death:</span> {COVID.deaths.value}</h1>\r\n                            {/* <p><Link to=\"#\">Details</Link></p> */}\r\n                        </div>\r\n                        <div className=\"total-recovered\">\r\n                            <h1><span className=\"recover\">Recovered:</span> {COVID.recovered.value}</h1>\r\n                            {/* <p><Link to=\"#\">Details</Link></p> */}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"graph\">\r\n                    <h1>Global Pandemic Crisis Graph</h1>\r\n                    <img src={COVID.image} alt=\"\"/>\r\n                </div>\r\n                <div className=\"countries\">\r\n                    <Countries />\r\n                </div>\r\n            </div>\r\n            <Footer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\n\r\nconst NotFound = () => {\r\n    return (\r\n        <div>\r\n            <h1>Oppsss!...Not Found!</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NotFound\r\n","import React from 'react';\r\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\r\n\r\nimport Home from './components/pages/Home';\r\nimport NotFound from './components/pages/NotFound';\r\n\r\n// Main CSS Style\r\nimport './styles/style.css';\r\n\r\nexport const App = () => {\r\n    return (\r\n        <Router>\r\n            <Switch>\r\n                <Route exact path=\"/\" component={Home} />\r\n                <Route component={NotFound} />\r\n            </Switch>\r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}